// Code generated by protoc-gen-go-authz. DO NOT EDIT.
// versions:
//  protoc-gen-go-authz	v0.0.0
//  protoc 				v3.20.1
// source: example/service/v1/org_service.proto

package v1

import (
	authorize "github.com/Neakxs/protoc-gen-authz/authorize"
	cel "github.com/google/cel-go/cel"
	proto "google.golang.org/protobuf/proto"
)

// Authz global configuration
var _File_example_service_v1_org_service_proto_authzConfiguration = &authorize.FileRule{
	Globals: &authorize.FileRule_Globals{
		Functions: map[string]string{
			"canPong": `"x-pong" in context.metadata`,
		},
	},
}

func NewOrgServiceAuthzInterceptor() (authorize.AuthzInterceptor, error) {
	m := map[string]cel.Program{}
	for k, v := range map[string]struct {
		expr string
		req  proto.Message
	}{
		"service.v1.OrgService.Ping": {expr: `!canPong() && size(request.ping) > 0`, req: &PingRequest{}},
		"service.v1.OrgService.Pong": {expr: `canPong() && size(request.pong) > 0`, req: &PongRequest{}},
	} {
		if pgr, err := authorize.BuildAuthzProgram(v.expr, v.req, _File_example_service_v1_org_service_proto_authzConfiguration); err != nil {
			return nil, err
		} else {
			m[k] = pgr
		}
	}
	return authorize.NewAuthzInterceptor(m), nil
}
