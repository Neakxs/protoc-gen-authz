// Code generated by protoc-gen-go-authz. DO NOT EDIT.
// versions:
//  protoc-gen-go-authz	{{PluginVersion}}
//  protoc 				{{ProtocVersion}}
// source: {{.Desc.Path}}

package {{.GoPackageName}}

{{ $f := . }}

{{ if (gt (len .Config.Globals.Functions) 0) }}
// Authz global configuration
var _{{.GoDescriptorIdent.GoName}}_authzConfiguration = &{{authorize "FileRule"}}{
    Globals: &{{authorize "FileRule_Globals"}}{
        Functions: map[string]string{
            {{ range $key, $value := .Config.Globals.Functions -}}
                "{{ $key }}": `{{ $value }}`,
            {{- end }}
        },
    },
}
{{ end }}

{{ range $s := .Services }}
func New{{.GoName}}AuthzInterceptor() ({{authorize "AuthzInterceptor"}}, error) {
    m := map[string]{{cel "Program"}}{}
    for k, v := range map[string]struct{
        expr string
        req {{proto "Message"}}
    }{
        {{ range $m := $s.Methods }}
        {{- if $m.MethodRule -}}
            "{{$m.Desc.FullName}}": {expr: `{{$m.MethodRule.Expr}}`, req: &{{QualifiedGoIdent $m.Input.GoIdent.GoImportPath $m.Input.GoIdent.GoName}}{}},
        {{- end}}
        {{end}}
    } {
        if pgr, err := {{authorize "BuildAuthzProgram"}}(v.expr, v.req,  _{{$f.GoDescriptorIdent.GoName}}_authzConfiguration); err != nil {
            return nil, err
        } else {
            m[k] = pgr
        }
    }
    return {{authorize "NewAuthzInterceptor"}}(m), nil
}
{{- end}}