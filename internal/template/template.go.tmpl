// Code generated by protoc-gen-go-authz. DO NOT EDIT.
// versions:
//  protoc-gen-go-authz	{{PluginVersion}}
//  protoc 				{{ProtocVersion}}
// source: {{.Desc.Path}}

package {{.GoPackageName}}

{{ $f := . }}

{{define "NewFileRule"}}&{{authorize "FileRule_Overloads_Type"}}{
    {{ if .GetPrimitive -}}
    Type: &{{authorize "FileRule_Overloads_Type_Primitive_"}}{
        Primitive: {{authorize (print "FileRule_Overloads_Type_" .GetPrimitive.String )}},
    },
    {{- else if .GetObject -}}
    Type: &{{authorize "FileRule_Overloads_Type_Object_"}}{
        Object: {{.GetObject}},
    },
    {{- else if .GetArray -}}
    Type: &{{authorize "FileRule_Overloads_Type_Array_"}}{
        Array: &{{authorize "FileRule_Overloads_Type_Array"}}{
            Type: {{template "NewFileRule" .GetArray.Type}},
        },
    },
    {{- else if .GetMap -}}
    Type: &{{authorize "FileRule_Overloads_Type_Map_"}}{
        Map: &{{authorize "FileRule_Overloads_Type_Map"}}{
            Key: {{template "NewFileRule" .GetMap.Key}},
            Value: {{template "NewFileRule" .GetMap.Value}},
        },
    },
    {{- end }}
}
{{- end}}

// Authz global configuration
var _{{.GoDescriptorIdent.GoName}}_authzConfiguration = &{{authorize "FileRule"}}{
    {{ if .Config.Globals -}}
    Globals: &{{authorize "FileRule_Globals"}}{
        {{ if (gt (len .Config.Globals.Functions) 0) -}}
        Functions: map[string]string{
            {{ range $key, $value := .Config.Globals.Functions -}}
                "{{ $key }}": `{{ $value }}`,
            {{- end }}
        },        
        {{- end }}
        {{ if (gt (len .Config.Globals.Constants) 0) -}}
        Constants: map[string]string{
            {{ range $key, $value := .Config.Globals.Constants -}}
                "{{ $key }}": `{{ $value }}`,
            {{- end }}        
        },        
        {{- end }}
    },
    {{- end}}
    {{ if .Config.Overloads -}}
    Overloads: &{{authorize "FileRule_Overloads"}}{
        {{ if (gt (len .Config.Overloads.Functions) 0) -}}
        Functions: map[string]*{{authorize "FileRule_Overloads_Function"}}{
            {{ range $key, $value := .Config.Overloads.Functions -}}
                "{{ $key }}": {
                    Args: []*{{authorize "FileRule_Overloads_Type"}}{
                        {{ range $arg := $value.Args -}}
                        {{template "NewFileRule" $arg}},
                        {{ end}}
                    },
                    Result: {{template "NewFileRule" $value.Result}},
                },
            {{- end }}
        },
        {{- end}}
        {{ if (gt (len .Config.Overloads.Variables) 0) -}}
        Variables: map[string]*{{authorize "FileRule_Overloads_Type"}}{
            {{ range $key, $value := .Config.Overloads.Variables -}}
                "{{ $key }}": {{template "NewFileRule" $value}},
            {{- end }}
        },
        {{- end}}
    },    
    {{- end}}
}

{{ range $s := .Services }}
func New{{.GoName}}AuthzInterceptor(opts ...{{authorize "Options"}}) ({{authorize "AuthzInterceptor"}}, error) {
    lib := {{authorize "BuildRuntimeLibrary"}}(_{{$f.GoDescriptorIdent.GoName}}_authzConfiguration, opts...)
    m := map[string]{{cel "Program"}}{}
    for k, v := range map[string]struct{
        expr string
        req {{proto "Message"}}
    }{
        {{ range $m := $s.Methods }}
        {{- if $m.MethodRule -}}
            "/{{$s.Desc.FullName}}/{{$m.GoName}}": {expr: `{{$m.MethodRule.Expr}}`, req: &{{QualifiedGoIdent $m.Input.GoIdent.GoImportPath $m.Input.GoIdent.GoName}}{}},
        {{- end}}
        {{end}}
    } {
        if pgr, err := {{authorize "BuildAuthzProgram"}}(v.expr, v.req,  _{{$f.GoDescriptorIdent.GoName}}_authzConfiguration, lib); err != nil {
            return nil, err
        } else {
            m[k] = pgr
        }
    }
    return {{authorize "NewAuthzInterceptor"}}(m), nil
}
{{- end}}