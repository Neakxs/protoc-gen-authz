// Code generated by protoc-gen-go-authz. DO NOT EDIT.
// versions:
//  protoc-gen-go-authz	{{PluginVersion}}
//  protoc 				{{ProtocVersion}}
// source: {{.Desc.Path}}

package {{.GoPackageName}}

{{ if (gt (len .Config.Globals.Functions) 0) }}
// Mapping of globally defined functions
var _{{.GoDescriptorIdent.GoName}}_globalFunctions = map[string]string{
{{ range $key, $value := .Config.Globals.Functions -}}
    "{{ $key }}": `{{ $value }}`,
{{- end }}
}
{{ end }}

{{ define "envOptsBuilder" -}}
{{ $m := . -}}
[]{{cel "EnvOption"}}{
    {{cel "DeclareContextProto"}}(m.ProtoReflect().Descriptor()),
    {{cel "Types"}}(&{{authorize "AuthorizationContext"}}{}),
    {{cel "Declarations"}}(
        {{decls "NewVar"}}(
            "_ctx",
            {{decls "NewObjectType"}}(string((&{{authorize "AuthorizationContext"}}{}).ProtoReflect().Descriptor().FullName())),
        ),
    ),
}
{{- end }}

{{ range $m := .Messages }}
{{ if $m.MessageRule -}}
var (
    _{{.GoIdent.GoName}}_celAuthzOnce {{sync "Once"}} = {{sync "Once"}}{}
    _{{.GoIdent.GoName}}_celAuthzProgram {{cel "Program"}} = nil
)
{{- end}}
{{ if $m.MessageRule -}}
// Authorize checks if the given message should be authorized in the current context.
// Used expr :
//     {{$m.MessageRule.Expr}}
{{- end}}
func (m *{{.GoIdent.GoName}}) Authorize(ctx {{ context "Context" }}) error {
{{ if $m.MessageRule -}}
    _{{.GoIdent.GoName}}_celAuthzOnce.Do(func() {
        {{ if (eq (len $m.Macros) 0) -}}
        envOpts := {{- template "envOptsBuilder" $m -}}
        {{ else -}}
        envOpts, err := {{authorize "BuildEnvOptionsWithMacros"}}({{- template "envOptsBuilder" $m -}}, map[string]string{
            {{ range $value := .Macros -}}
                "{{$value}}": _{{$.GoDescriptorIdent.GoName}}_globalFunctions["{{$value}}"],
            {{- end }}
        })
        if err != nil {
            return
        }
        {{- end }}
        env, err := {{cel "NewEnv"}}(envOpts...)
        if err != nil {
            return
        }
        ast, issues := env.Compile(`{{$m.MessageRule.Expr}}`)
        if issues != nil && issues.Err() != nil {
            return
        }
        pgr, err := env.Program(ast, {{cel "OptimizeRegex"}}(
            {{interpreter "MatchesRegexOptimization"}},
        ))
        if err != nil {
            return
        }
        _{{.GoIdent.GoName}}_celAuthzProgram = pgr
    })
    if _{{.GoIdent.GoName}}_celAuthzProgram == nil {
        return {{status "Error"}}({{codes "Internal"}}, "")
    }
    val, _, err := _{{.GoIdent.GoName}}_celAuthzProgram.ContextEval(ctx, {{authorize "BuildProgramVars"}}(ctx, m))
    if err != nil {
        return err
    }
    if res, ok := val.Value().(bool); ok {
        if !res {
            return {{status "Error"}}({{codes "PermissionDenied"}}, "")
        }
    } else {
        return {{status "Error"}}({{codes "Unknown"}}, "")
    }
    return nil
{{ else -}}
    return nil
{{- end }}
}
{{ end }}